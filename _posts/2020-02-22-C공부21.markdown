---
layout: post
title: "[C공부] 21_문자와 문자열 관련 함수"
date: 2020-02-22 19:20:35 +0900
category: '[C]'
---
# 21-1. 스트림과 데이터 이동

- **stream**: 데이터의 이동경로 / 외부장치와 프로그램과의 데이터 송수신의 다리역할을 함. 
(== fd(file descriptor)와 같은 개념)
- **콘솔**: 서버의 로컬장치에서 직접 명령어를 작성할 수 있는 입출력 장치. 물리적 터미널, 일반적으로 키보드와 모니터를 의미
+ **터미널**: 서버의 로컬 또는 원격으로 접속할 수 있는 콘솔을 구현한 소프트웨어
**+ 쉘**: 실제로 명령어를 전달하고 결과를 전달받는 프로그램 / 맥의 기본쉘: `bash` / 그 외로는 `sh`, `csh` 등이 있다.
- **콘솔 입출력과 파일입출력**
    - **콘솔 입출력**: 표준 스트림 사용 (스트림 생성 필요 X) - `stdin (0)` `stdout (1)` `stderr (2)`
    - **파일 입출력**: 스트림을 따로 생성해야 한다.  (fd3번부터~ 앞의 숫자부터 만들어짐)
- **EOF**: end of file, 파일의 끝을 나타내는 상수
window - `CTRL+Z` , Linux - `CTRL+D`

---
---

# 21-2, 3. 문자/열 단위 입출력 함수 (표준 입출력 함수)

- **표준 입출력 함수 `<stdio.h>`**


- 문자 출력함수 `putchar`, `fputc`
- 문자 입력함수 `getchar`, `fgetc`
    - 예제

        ```c
        #include <stdio.h>

        int main(void)
        {
        	int ch;

        	while (1)
        	{
        		ch = getchar();
        		if(ch == EOF)
        			break;
        		putchar(ch);
        	}
        	return (0);
        }
        ```

---

- 문자열 출력함수 `puts`, `fputs`
    - 예제

        ```c
        //puts, fputs 예제

        #include <stdio.h>

        int main(void) 
        {
        	char *str = "Simple String";

        	printf("1. puts test ------\n");
        	puts(str);
        	puts("So Simple String");	// 자동으로 '\n'이 입력됨

        	printf("2. fputs test ------\n");
        	fputs(str, stdout);
        	printf("\n");
        	fputs("So Simple String", stdout);
        	printf("\n");				// '\n'이 붙지 않음

        	printf("3. end of main ----\n");
        	return 0;
        }
        ```

        ```bash
        $ ./main
        1. puts test ------
        Simple String
        So Simple String
        2. fputs test ------
        Simple String
        So Simple String
        3. end of main ----
        ```

- 문자열 입력함수 `gets`, `fgets`
    - `gets(char *s);`: 배열을 미리 만들어주고 입력받음 - 배열 메모리를 넘는 값이 입력돌 경우 오류 발생
    - `fgets(char *s, int n, FILE *stream);`: stream(stdin)으로부터 문자열을 입력받아서 str에 n길이만큼 저장 - 맨끝공간은 '\0' 저장 (`\n`을 만날 때까지 문자열을 읽어들인다.) 
    `리턴값`: 저장한 `s`, EOF에 도달하거나 함수호출 실패시 `NULL포안터`
    ★정리 - 문자열 하나를 저장하는데, 문자열의 구분 기준은 `\n`이다. 
    *함수 종료 시 문자열이 끝난 다음을 가리키나 보다. 반복해서 사용할 경우 다음부터 읽으니까.*
    - 예제

        ```c
        //gets, fgets 예제

        #include <stdio.h>

        int main(void) 
        {
        	char str[7];
        	int	i;

        	for(i=0; i<3; i++)
        	{
        		fgets(str, sizeof(str), stdin);
        		printf("Read %d: %s \n", i+1, str);
        	}
        	return 0;
        }
        ```

        ```bash
        $ ./main
        12345678901234567890
        Read 1: 123456 
        Read 2: 789012 
        Read 3: 345678
        ```

        ```bash
        $ ./main     #set-str[5]
        hi
        Read 1: hi   #'\n'을 한 문자로 치고, '\n'을 문자열의 끝으로 인식한다. (\n까지 문자열을 읽는다)
        						 #그래서 여기서 '\n'이 두 번 된 것.
        hello
        Read 2: hell #'\n'까지 한 문자로 치기 때문에 4자까지 하고 끊긴것 (끝 \0)  
        Read 3: o    #'o\n'출력

        ```

---
---

# 21-4. 표준 입출력과 버퍼

- **buffer 버퍼**: 데이터를 전송할 때 임시로 저장하는 메모리공간.
- **버퍼링의 이유?** 데이터 전송의 효율성 (하나하나 옮기는 것보다 수레로 한번에 옮기는!)
- 입력된 데이터가 (입력 스트림을 거쳐) 입력 버퍼로 들어가는 시점: `enter`! (`\n`이 눌리는 시점)
**엔터**를 치기 전까지는 입력버퍼가 비워져있다.
- 즉, `fgets`함수가 읽어들이는 문자열은 입력버퍼에 저장된 문자열이다.

```bash
프로그램 ←—((입력버퍼))—— 키보드
프로그램 ——((출력버퍼))—→ 모니터 
```
---

- **버퍼를 비우는 함수 `fflush`**
(나중에..) - 간략: 만약 입력 버퍼에 제시한 문자열보다 더 많이 입력한 경우, 다음 입력으로 새 값을 받아야 할 때 `fflush`로 버퍼를 비우고 받는다.
나중에 예제 해볼 것.