---
layout: post
title: "[Java] 05~6. 데이터타입"
date: 2021-07-13 17:13:00 +0900
category: java
---

*Java study with 생활코딩*
<br/>
## 1. 데이터 타입

`System.out.println()` : 정말 많이 쓰게 될 메소드 *(printf같은것)*

TIP→ `sysout` 입력 후 `Ctrl + Space` ⇒ 자동완성됨.

```java
public class Datatype{
	public static void main(String[] args) {
		System.out.println(6); // Number
		System.out.println("six"); // String
		System.out.println("6"); // String "6"
	}
}
```

- 숫자는 그냥 숫자 넣으면 됨
- 문자열은 "따옴표 안에"

---

```java
System.out.println(6+6); // 12
System.out.println("6"+"6"); //66
```

아래의 경우 **결합연산자** (문자열을 위한 연산)가 사용된 것. 

---

```java
System.out.println("1111".length()); // 4 (문자열의 길이)
```

---

## System.out.println()

**System**은 java.lang 패키지에 속하는 클래스이다.

즉, import를 하지 않고 바로 쓸 수 있는 클래스. 

**out**은 콘솔 객체를 의미한다. 이때 static 객체이므로 바로 System.out로 접근할 수 있는 것이다 (new 등을 써서 힙에 할당하지 않고)

**println()**은 문자열을 출력하는 메소드이다. 

- `System.out.print()` : 콘솔에 출력
- `System.out.println()` : 위와 동일, 끝에 `\n`을 붙여서 출력

## 2. 숫자와 연산

eclipse tip: new→class 하면 메인까지 넣어서 java 파일을 생성할 수 있다. 

- 연산자 operator `+`, `-`, `*`, `/`
- Math. 
라이브러리같은 개념.
    - `Math.floor` : 내림
    - `Math.ceil` : 올림

```java
public class Number {

	public static void main(String[] args) {
		// Operator
		System.out.println(6 + 2); // 8
		System.out.println(6 - 2); // 4
		System.out.println(6 * 2); // 12
		System.out.println(6 / 2); // 3
		
		// 캐비넷 (library) - Math
		System.out.println(Math.PI); //3.14159265..
		System.out.println(Math.floor(Math.PI)); //floor는 내림이라는 뜻. --> 3.0
		System.out.println(Math.ceil((Math.PI))); //ceil은 올림이라는 뜻. --> 4.0
	}
}
```

## 3. 문자열의 표현

```java
System.out.println("Hello World"); // String (문자열)
		System.out.println('H'); // Character (문자)
```

- `String`
- `Character`

---

```java
System.out.println("plus " + "test");
System.out.println("enter\ntest"); // new line
System.out.println("Hello\"World\""); // escape
```

- `+` : 결합 연산자 그냥 이어서 출력해줌.
- `\n` : 줄바꿈 new line
- `\` : 뒤 문자 escape

## 4. 문자열 다루기

```java
System.out.println("Hello World".length()); // 11
System.out.println("Hello, [[name]] .. bye".replace("[[name]]", "ybong")); // Hello, ybong .. bye
```

- `[문자열].length()` : 문자열의 길이를 반환함
- `[문자열].replace("A", "B")` : 문자열에서 A를 B로 교체함