---
layout: post
title: "[Java] G03. 메모리와 자료형"
date: 2021-07-28 23:13:00 +0900
category: java
---

*Java study with Goorm*  
### Index

- [메모리](#메모리)
- [변수와 상수](#변수와-상수)
- [자료형](#자료형)
- [정리](#정리)

<br/>
<br/>


# 메모리

## 컴퓨터가 데이터를 저장하는 공간

1. Register
    - CPU(aka 컴퓨터의 두뇌) 내부에서 사용되는 저장공간
2. Storage
    - '하드드라이브'라고도 불리는 HDD(Hard Disk Drive)
    - 용량당 가격이 아주 저렴하다는 장점이 있으나, 속도가 매우 느리다는 단점.
    - 최근에는 SSD(Solid State Disk)라는 HHD의 속도를 보완한 제품이 출시되고 있다. (가격은 더 비쌈)
3. Memory
    - RAM이라고 불리는 하드웨어가 Memory 공간을 담당한다.
    - Storage보다 빠르지만, Register보다는 느린 속도로, Storage와 Register 사이에 위치하여 다른 속도 및 용량을 갖고 있는 저장장소들을 보완하는 역할

|저장공간|Register|Memory|Storage|
|:-|:-:|:-:|:-:|
|용량당 가격|매우비쌈|중간|저렴|
|처리속도|매우높음|중간|느림|
|예시|CPU Register|RAM|HDD, SSD|

## 프로그램 동작 원리

- Storage에 프로그램들이 저장되어 있다.
- Storage에 저장된 프로그램을 실행하면, 운영체제가 해당 프로그램을 **Memory에 Load**한다.
    - Storage의 속도가 너무 느리기 때문에, CPU의 처리속도에 맞출 수 없다. 그래서 Storage에 저장된 프로그램을 그나마 좀 더 빠른 Memory에 Load하여 처리하게 된다.
- 즉, 프로그램은 Storage공간에 먼저 저장되고, 그 프로그램을 실행하게 되면 Memory에 Load되는 절차를 거쳐 실행된다.
- 이 때 Memory에 Load된 프로그램을 **Process**라고 한다.

</br>

# 변수와 상수

## 변수 (Variable)

- 변할 수 있는 어떤 수.
- 변수를 선언하면, 컴퓨터는 비어있는 주소를 가져와 변수명이 기록된 공간을 생성한다.
- 즉, 변수명과 특정 Memory 주소가 연결된다.
    - 변수명 규칙
        - 첫 글자에는 `영문자`, `$`, `_`만 사용할 수 있다.
        - 첫 글자가 아니라면 숫자도 사용 가능하다.
        - 대소문자는 구별된다.
        - 예약어는 사용할 수 없다. (예약어 : 자바에서 기본으로 사용하는 예약된 단어. this, if, class, for, abstract 등)
- 변수를 초기화하지 않으면 컴파일러에서 에러가 발생하므로, 선언 시 초기화하는 습관을 가질것.

## 상수 (Constatnts)

- 값이 변하지 않는 데이터 공간으로, 변수 앞에 **final**을 붙여서 사용한다.
- 상수로 선언된 자료형은 내부의 값을 변화시킬 수 없고, 선언과 동시에 초기화되어야 한다.

```java
final int a = 3;
```

</br>


# 자료형
## 기본형

- 정수형 (Integral Type)
    - `int` `short` `long`
- 실수형 (Floating point Type)
    - `float` `double`
    - 실수형 자료형에는 정수형 데이터를 저장할 수 있다.
    - Java에서 일반적인 실수는 기본적으로 double형이다. float형에 실수를 저장할 시에는 숫자 뒤애 f를 붙여 float형태임을 명시해야 한다.

        ```java
        float varFloat = 12.34f;
        ```

- Boolean Type (참/거짓형)
    - `boolean` - 1bit

        ```java
        boolean varTrue = true;
        boolean barFalse = false;
        ```

- 문자형 (Character Type)
    - `char`

## 참조형

- 기본형이 아닌 자료형은 모두 참조형이다.
- 참조형은 값이 저장된 **주소를 저장하는 자료형**으로, 자바에서는 모두 **객체의 주소**를 의미한다.

    (C의 포인터와 같은 개념)

1. `Class Type`
2. `Interface Type`
3. `Array Type`
4. `Enum Type`

## 형변환 (Type Casting)

boolean형을 제외한 모든 기본자료형에서 사용 가능하다. 

- 명시적 형변환

    ```java
    import java.io.*;
    class Main {
        public static void main(String[] args) {
            double varDouble = 98.76;
            int varInteger = (int)varDouble;  // casting
            System.out.println(varInteger);	
        }
    }
    ```

    형을 강제변환한다. 위 경우 정수 데이터만 저장될 수 있기 때문에 실수부 (.76)은 유실된다. 

- 묵시적 형번환

    ```java
    import java.io.*;
    class Main {
        public static void main(String[] args) {
            short varShort = 5;
            double varDouble = varShort;
            System.out.println(varDouble); 
        }
    }
    ```

    형태를 명시하지 않는 형변환. 바꾸고자 하는 타입을 명시하지 않아도 자료형이 자동으로 바뀌는 형변환이다. 

    - 묵시적 형변환이 가능한 조건 : `목표 자료형 크기 > 바꾸려는 데이터의 자료형 크기` 일 때 가능하다. (바꾸려는 데이터 자료형의 크기가 더 작을 때)

</br>

# 정리

- 메모리, 변수, 상수 개념
- 자료형과 형변환(캐스팅)