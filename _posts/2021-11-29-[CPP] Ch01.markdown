---
layout: post
title: "[CPP] 01. 기본1"
date: 2021-11-29 23:59:00 +0900
category: CPP
---

# 01-2. 함수 오버로딩

- 매개변수의 선언 형태가 다르면, 동일한 이름의 함수정의가 가능하다.
    - C++에서는 함수의 이름, 매개변수의 선언 두가지 정보를 동시에 활용하여 함수를 찾는 반면, C는 함수의 이름으로만 호출 대상을 찾기 때뭄ㄴ에 오버로딩이 불가능하다.

# 01-3. 매개변수의 디폴트 값 (Default Value)

### Default Value

- C++의 함수에서는 '디폴트 값'을 설정할 수 있다.
    
    ```java
    int MyFunc(int num=7) //default Value 설정
    {
    	return num;
    }
    ```
    
    - 즉, 함수호출 시 인자를 전달하지 않으면 7이 전달된 것으로 간주하겠다는 의미
    - 따라서 `Myfunc()` 와 `Myfunc(7)`은 완전히 동일함.
- 복수의 매개변수 선언이 존재하는 경우, 전달되는 인자는 왼쪽부터 채워져나가고, 부족분은 디폴트값으로 채워진다.
- 디폴트 값은 함수의 선언부분에만 표현하면 된다. 즉, 함수 원형을 먼저 선언하는 경우, 매개변수의 디폴트값은 최초의 원형 선언에만 위치시켜야 한다.
    
    ```java
    int MyFunc(int num=7); //default Value 설정
    
    int MyFunc(int num) 
    {
    	return num;
    }
    ```
    

### 부분적 디폴트값

```java
int Func(int num1, int num2=5, int num=7)
{
}
```

- 위처럼 매개변수 중 일부만 디폴트값을 지정할 수도 있다.
- 단, 디폴트 값이 지정된 변수가 오른쪽부터 위치해야 한다.
- 디폴트값이 없는 변수가 왼쪽에 있어야 함.

# 01-4. 인라인(inline)함수

- 프로그램 코드라인 안으로 들어가버린 함수..

### 매크로함수

- 장점: 일반 함수에 비해 실행속도가 빠르다.
- 단점: 정의하기가 어렵다, 복잡한 함수를 매크로 형태로 정의하는데 한계가 있음.
- *이런 매크로 함수를 함수처럼 정의할 수 있는 게 C++의 인라인 함수!*

### 인라인 함수 정의

```cpp
#include <iostream>

inline int SQUARE(int x)  // <-- inline 함수!
{
	return X*X;
}

int main(void)
{
	std::cout<<SQUARE(5)<<std::endl; // 25
	std::cout<<SQUARE(12)<<std::endl; // 144
	return 0;
}
```

- 매크로함수의 인라인화*(호출부 몸체가 함수 식? 문장?으로 대체되는 거)*는 전처리기에 의해서 처리되지만, 키워드 `inline`을 이용한 함수의 인라인화는 컴파일러에 의해 처리된다.
    - 따라서 컴파일러는 함수의 인라인화가 오히려 성능에 해가 된다고 판단할 경우, 키워드를 무시하기도 한다고 함.
    - 또한 필요한경우 컴파일러가 일부 함수를 인라인 처리 하기도 한다고 함.

### 인라인 함수의 한계

- 매크로와 다른 인라인함수의 한계는 자료형을 지정하기 때문에 데이터 손실 우려가 있을 수 있다는 것 (예를들어 위의 경우 double로 호출하면 int로 실행되면서 데이터 손실이 발생함)
- 하지만 이러한 한계는 '템플릿'이라는 것을 이용하면 자료형에 의존적이지 않은 함수를 만들 수 있다! 나중에 볼것..

# 01-5. 이름공간 (namespace)

### namespace

- 이름을 붙여놓은 공간.
    - *201호 철수, 202호철수*
- 함수나 구조체 혹은 변수 이름 등의 소속을 정해주는 것
- 함수나 변수, 구조체 이름의 충돌을 막아준다.

```cpp
namespace Com1
{
	void Func(void)
	{
		std::out<<"Com1이 정의한 함수";
	}
}

namespace Com2
{
	void Func(void)
	{
		std::out<<"Com2이 정의한 함수";
	}
}

int main(void)
{
	Com1::Func(); // "Com1이 정의한 함수"
	Com2::Func(); // "Com2이 정의한 함수"
	return 0;
}
```

### 범위연산자 :: (scope resolution operator)

- 이름 공간을 지정할 때 사용하는 연산자.

### namespace의 중첩

- namespace는 다른 namespace 안에 삽입될 수 있다.
    
    ```cpp
    namespace Parent
    {
    	int num=2;
    
    	namespace SubOne
    	{
    		int num=3;
    	}
    	namespace SubTwo
    	{
    		int num=4;
    	}
    }
    
    std::count<< Paraent::num; //2
    std::count<< Paraent::SubOne::num; //3
    std::count<< Paraent::SubTwo::num; //4
    ```
    

### using을 이용한 이름공간의 명시

```cpp
#include <iostream>

namespace Hybrid
{
	void HybFunc(void)
	{
		std::cout<<"So simple function!"<<std::endl;
		std::cout<<"In namespace Hybrid!"<<std::endl;
	}
}

int main(void)
{
	using Hybrid::HybFunc; //using으로 공간 명시 (밑에 설명 참고)
	HybFunc();
	return 0;
}
```

- using~ : Hybrid에 정의된 HybFunc를 호출할 때에는, 이름공간을 지정하지 않고 호출하겠다고 명시한 것!
- 즉, HybFunc를 이름공간 Hybrid에서 찾으라는 일종의 선언이다. 이 때 HybFunc부분은 함수의 이름이 될 수도 있고, 변수의 이름이 될 수도 있다.
- using은 지역변수와 마찬가지로 선언된 지역에서만 효력을 발휘한다. 변수처럼, 전역으로 사용하렴녀 전역 지역에서 선언해야 함.

### namespace의 별칭 지정

```cpp
namespace AAA
{
	namespace BBB
	{
		namespace CCC
		{
			int num1=1;
			int num2=2;
		}
	}
}

namespace ABC=AAA::BBB::CCC; //별칭 지정!

std::cout<< ABC::num1 // 1
std::cout<< ABC::num2 // 2
```

### 범위 지정 연산자(`::` , Scope Resolutin Operator)의 또 다른 기능

- 지역변수의 이름이 전역변수의 이름과 같은 경우, 전역변수는 지역변수에 의해 가려지는 특징이 있다.
- 하지만 이 때, 함수 내에서 전역변수를 호출하고 싶을 경우 `::g_val`로 호출할 수 있다.
    - 즉, 변수 앞에 ::를 붙이면 전역변수를 호출할 수 있다.