---
layout: post
title: "[CPP] 02. CPP 기본2"
date: 2021-11-29 21:59:00 +0900
category: CPP
---

# 02-1. 들어가며

# 02-2. bool

# 02-3. 참조자 (Reference) `&`

### 참조자의 이해

```cpp
int num1=2021;

int &num2=num1; //2021로 초기화된 공간을 가리키는 참조자 num2
```

- 즉, 참조자는 자신이 참조하는 변수를 대신할 수 있는 또 하나의 이름이라고 보면 된다.
- 별칭이라고 보면 됨.
- 참조자 수에는 제한 이없으며, 참조자를 대상으로 참조자 선언도 가능하다.

### 참조자 선언 가능 범위

- 참조자는 변수에 대해서만 선언이 가능하고, 선언과 동시에 참조가 이뤄져야 한다. 즉, 다음 선언은 유효하지 않다.
- 변수에 또다른 이름을 붙이는 것이기 때문에, 상수를 대상으로 참조자를 선언할 수는 없다.
- 초기화 시에 참조하지 않고 후에 초기화가 불가능하다.
- null로 초기화도 불가하다.
- 참조의 대상을 바꾸는 것도 불가능하다.
- 포인터 변수 대상으로도 참조자 선언이 가능 (변수이기때문)

# 02-4. 참조자와 함수

### call-by-value & call-by-reference

- 함수 선언 프로토타입이 `void func(int &ref)`와 같이 call-by-reference로 호출할 경우, 인자로 넘겨준 변수의 값이 바뀔 수 있음. 그것이 참조자의 단점.
- 최대한 참조자 기반의 함수정의를 하지 말아야 한다.
- const로 어느정도 보완하는 방법도 있다.
    - `void Func(const int &ref)`
    - 참조자 ref에 const 선언 → Func함수 안에서 참조자 ref을 이용한 값의 변경을 않는다는 설정.
- 정리하자면, 함수 내에서 참조자를 통한 값의 변경을 진행하지 않을 경우, 참조자를 const로 선언해서 함수의 원형만 봐도 값의 변경이 이뤄지지 않음을 알 수 있게 하는 것이 좋다.

### 반환형이 참조형 (reference type)인 경우

```cpp
int& RefRetFunc(int &ref)
{
	ref++;
	return ref;
}
```

- 반환값을 무엇으로 저장하느냐에 따라 그 주소 공간이 달라진다.
    - 예를 들어 참조형 변수에 담으면 그 공간 참조변수가 되고,   int변수에 담으면 그냥 새로운 공간에 위치한 변수에 값만 들어가는 것

### 참조자를 반환하되, 반환형은 기본자료형인 경우

- 상수로 반환되는 것이기 때문에 참조형에 대입할 수 없음을 유의

### 잘못된 참조의 반환

- 반환형이 참조형일 때, 기본자료형 변수 (함수 내부의 지역변수)를 반환할 경우, 지역변수의 메모리공간 참조형이 반환되는 것이다. 그런데 지역변수는 함수 종료와 함께 소멸되므로 반환하는 변수의 값이 전달되지 않고 소멸되는 공간의 참조형변수가 반환되는 것이다. 주의

### const 참조자의 또 다른 특징

- const 참조자는 const 변수를 참조할 수 있고, 상수도 참조 가능하다
    
    ```java
    const int &ref=50; //상수 참조
    ```
    
- 보통 위와 같은 리터럴 상수는 임시적으로 존재하는 값으로, 다음 행으로 넘어가면 존재하지 않는 상수이다.
- 그런데 const 참조자를 이용해서 상수를 참조할 때 C++에서 '**임시변수**'라는 것을 만들게 된다. 그리고 이 장소에 상수 50을 저장하여 참조자가 참조하게 된다.
    - 결과적으로는 상수화된 변수를 참조하는 형태가 된다.

# 02-5. malloc & free를 대신하는 new & delete

동적할당
delete []int

# 02-6. C++에서 C언어 표준함수 호출하기

- c를 더하고 .h를 빼라
    - #include <stdio.h>  →  #include <cstdio>
- 하지만 가급적 C++ 헤더를 사용하는 것이 좋다.