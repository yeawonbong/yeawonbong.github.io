---
layout: post
title: "[CPP] 03. 클래스 기본"
date: 2021-11-29 23:59:00 +0900
category: CPP
---
# 03-1. C++에서의 구조체

### 구조체 선언

```cpp
struct Car
{
	int ID;
	int speed;
};

Car basicCar;
Car simpleCar;
```

*java와 비슷함 패스*

### 구조체 안에 enum 상수의 선언

- (enumerated type 열거형)
- 서로 연관된 상수들의 집합
- 구조체 내에서만 유효한 상수를 정의할 수 있다.
    
    ```cpp
    struct Car
    {
    	enum
    	{
    		ID_LEN = 20;
    		MAX_SPD = 200;
    		...
    	};
    	int speed;
    	void ShowCarState(){...}
    	void Accel(){...}
    	void Break(){...}
    };
    ```
    
- 하지만 이방법 말고, namespace지정해서 할 수도 있다.

### 구조체의 함수 밖으로 뺄 수 있다

```cpp
struct Car
{
	enum
	{
		ID_LEN = 20;
		MAX_SPD = 200;
		...
	};
	int speed;
	void ShowCarState();
	void Accel();
	void Break();
};

void Car::ShowCarState()
{
	...
}

void Car::Accel()
{
	...
}

void Car::Break()
{
	...
}
```

- 함수 원형을 구조체 안에 두고, 함수 정의를 밖으로 빼는 것! 다만, 뺀 다음 해당 함수가 어디에 정의되어있는 지 정보를 추가해주면 된다 (namespace)
- 원래 구조체 안에 함수가 정의되어있으면, 함수를 인라인으로 처리하는 의미가 내포된다.
    - 하지만 위에서처럼 함수를 구조체 밖으로 빼내면, 이런 의미가 사라진다.
    - 따라서 인라인의 의미를 그대로 유지하려면 다음과 같이 키워드 inline을 이용하여 인라인 처리를 명시적으로 지시해야 한다.
        
        ```cpp
        inline void Car::Break()
        {
        	...
        }
        ```
        

# 03-2. 클래스와 객체

### 클래스와 구조체의 차이점 - 그냥 키워드

- 그냥 동일하다. 키워드만 다를뿐
- 위 예제에서 struct 대신 class를 사용하면 구조체가 아닌 클래스가 된다.
    
    ```cpp
    class Car
    {
    	enum
    	{
    		ID_LEN = 20;
    		MAX_SPD = 200;
    		...
    	};
    	int speed;
    	void ShowCarState();
    	void Accel();
    	void Break();
    };
    
    ```
    

### 접근제어 지시자 (접근 제어 레이블)

- public
- protected : 상속관계에서 하위 클래스에서의 접근 허용
- private : 클래스 내에서만 접근 허용
- 클래스 내에서 접근제어 다르게 설정할 수 있다.
    
    ```cpp
    class Car
    {
    private:
    	char ID;
    	int speed;
    public:
    	void InitMembers(char ID, int speed);
    	void ShowCarState();
    	void Accel();
    	void Break();
    };
    ```
    
- struct를 이용해서 정의한 구조체(클래스)는 따로 접근제어 지시자를 설정하지 않을 경우
    - public으로 선언됨.
- class를 이용해서 정의한 클래스 안에 따로 접근제어지시자 설정하지 않을 경우
    - privated으로 선언됨.

### 용어정리

- 객체 - 생성된 클래스/구조체라 보면 됨
- 멤버변수
- 멤버함수

### C++에서의 파일 분할

- *.h : 클래스의 선언을 담는다.
    - 클래스의 선언 declaration
    - inline 함수는 헤더파일에 함께 넣어야 한다.
        - 컴파일 과정에서 함수의 호출문이 있는 곳에 함수의 몸체 부분이 삽입되어야 하기 때문에, 선언부에 인라인 함수가 있어야 하는 것이다.
- *.cpp : 클래스의 정의(멤버함수의 정의)를 담는다.
    - 클래스의 정의 definition

# 03-3. 객체지향 프로그래밍의 이해

### 객체 생성 방법

- 클래스 선언은 그냥 틀이기 때문에, 객체로 생성해야 사용할 수 있다.

```cpp
Classname objName; //일반적인 변수의 선언 방식
ClassName *ptrObj=new ClassName; // 동적 할당 방식(힙 할당방식)
```

### 객체간의 대화 방법 - Message Passing 방법

- 한 객체가 다른 객체에 메시지를 전달하는 방법은 함수 호출을 기반으로 한다. 이를 메시지 패싱이라 한다.